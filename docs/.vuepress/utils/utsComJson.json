{"animation-view":{"name":"## animation-view","description":"Lottie 动画\n> 本 Component 是 uni ext component，需下载插件：[animation-view](https://ext.dcloud.net.cn/plugin?name=uni-animation-view)\n\n\n### animation-view 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | - |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| path | string | \"\" | 动画资源地址，目前只支持绝对路径 |\n| loop | boolean | false | 动画是否循环播放 |\n| autoplay | boolean | false | 动画是否自动播放 |\n| action | string | \"stop\" | 动画操作，可取值 play、pause、stop |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| play | 播放 |\n@| pause | 暂停 |\n@| stop | 停止 |\n| hidden | boolean | false | 是否隐藏动画 |\n| @ended | (event: [UniEvent](/component/common#unievent)) => void | - | - |\n\n#### action 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| play | 3.9 | 4.11 | - |\n| pause | 3.9 | 4.11 | - |\n| stop | 3.9 | 4.11 | - |\n","event":"","example":"","compatibility":"### animation-view 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| path | 3.9 | 4.11 | - |\n| loop | 3.9 | 4.11 | - |\n| autoplay | 3.9 | 4.11 | - |\n| action | 3.9 | 4.11 | - |\n| hidden | 3.9 | 4.11 | - |\n| @ended | 3.9 | 4.11 | - |\n","children":"","reference":"\n### 参见\n- [参见uni-app相关文档](https://uniapp.dcloud.io/component/animation-view)\n- [插件市场](https://ext.dcloud.net.cn/plugin?id=10674)\n- [参见uni-app x相关文档](https://doc.dcloud.net.cn/uni-app-x/component/animation-view.html)\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.animation-view)\n"},"button":{"name":"## button","description":"> 组件类型：UniButtonElement \n\n 按钮\n\n### button 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.0 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| disabled | boolean | false | 是否禁用 |\n| hover-class | string([string.ClassString](/uts/data-type.md#ide-string)) | \"button-hover\" | 指定按下去的样式类。当 hover-class=\"none\" 时，没有点击态效果 |\n| hover-start-time | number | 20 | 按住后多久出现点击态，单位毫秒 |\n| hover-stay-time | number | 70 | 手指松开后点击态保留时间，单位毫秒 |\n| size | string | \"default\" | 按钮的大小 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| default | 默认大小 |\n@| mini | 小尺寸 |\n| type | string | \"default\" | 按钮的样式类型 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| default | 白色 |\n@| primary | 蓝色 |\n@| warn | 红色 |\n| plain | boolean | false | 按钮是否镂空，背景色透明 |\n| loading | boolean | - | 名称前是否带 loading 图标 |\n| form-type | string | - | 用于 form 组件，点击分别会触发 form 组件的 submit/reset 事件 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| submit | 提交表单 |\n@| reset | 重置表单 |\n\n#### size 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| default | 3.9 | 4.11 | 4.0 |\n| mini | 3.9 | 4.11 | 4.0 |\n\n\n#### type 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| default | 3.9 | 4.11 | 4.0 |\n| primary | 3.9 | 4.11 | 4.0 |\n| warn | 3.9 | 4.11 | 4.0 |\n\n\n#### form-type 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| submit | 3.9 | 4.11 | 4.0 |\n| reset | 3.9 | 4.11 | 4.0 |\n","event":"","example":"### 示例 \n> [hello uni-app x](https://gitcode.net/dcloud/hello-uni-app-x/-/blob/alpha/pages/component/button/button.uvue) \n ::: preview https://hellouniappx.dcloud.net.cn/web/#/pages/component/button/button\n>Template\n```vue\n\r\n\r\n<template>\r\n  <view class=\"main\">\r\n    <button id=\"testButton\" :disabled=\"disabled_boolean\" :size=\"size_enum[size_enum_current].name\"\r\n      :type=\"type_enum[type_enum_current].name\" :plain=\"plain_boolean\" @click=\"button_click\"\r\n      @touchstart=\"button_touchstart\" @touchmove=\"button_touchmove\" @touchcancel=\"button_touchcancel\"\r\n      @touchend=\"button_touchend\" @tap=\"button_tap\" @longpress=\"button_longpress\" class=\"btn\"\r\n      :class=\"default_style ? 'custom-btn' : ''\" :hover-class=\"default_style ? 'is-hover' : 'button-hover'\">\r\n      {{ text }}\r\n    </button>\r\n  </view>\r\n  <scroll-view style=\"flex: 1\">\r\n    <view class=\"content\">\r\n      <boolean-data :defaultValue=\"false\" title=\"按钮是否镂空，背景色透明\" @change=\"change_plain_boolean\"></boolean-data>\r\n      <boolean-data :defaultValue=\"false\" title=\"是否禁用\" @change=\"change_disabled_boolean\"></boolean-data>\r\n      <boolean-data :defaultValue=\"false\" title=\"修改默认样式和点击效果(高优先)\" @change=\"change_default_style\"></boolean-data>\r\n      <enum-data :items=\"size_enum\" title=\"按钮的大小\" @change=\"radio_change_size_enum\"></enum-data>\r\n      <enum-data :items=\"type_enum\" title=\"按钮的类型\" @change=\"radio_change_type_enum\"></enum-data>\r\n      <input-data :defaultValue=\"text\" title=\"按钮的文案\" type=\"text\" @confirm=\"confirm_text_input\"></input-data>\r\n      <view style=\"height: 10px;\"></view>\r\n      <button @click=\"navigateToChild\">更多示例</button>\r\n    </view>\r\n  </scroll-view>\r\n</template>\r\n\r\n<style>\r\n  .main {\r\n    padding: 5px 0;\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.06);\r\n    flex-direction: row;\r\n    justify-content: center;\r\n  }\r\n\r\n  .main .list-item {\r\n    width: 100%;\r\n    height: 100px;\r\n    border: 1px solid #666;\r\n  }\r\n\r\n  .custom-btn {\r\n    color: #ffffff;\r\n    background-color: #1AAD19;\r\n    border-color: #1AAD19;\r\n  }\r\n\r\n  .is-hover {\r\n    color: rgba(255, 255, 255, 0.6);\r\n    background-color: #179b16;\r\n    border-color: #179b16;\r\n  }\r\n\r\n  .button-hover {\r\n    color: rgba(0, 0, 0, 0.6);\r\n    background-color: #dedede;\r\n  }\r\n</style>\n\n```\n>Script\n```uts\n\r\n  import { ItemType } from '@/components/enum-data/enum-data'\r\n  export default {\r\n    data() {\r\n      return {\r\n        plain_boolean: false,\r\n        disabled_boolean: false,\r\n        default_style: false,\r\n        size_enum: [{ \"value\": 0, \"name\": \"default\" }, { \"value\": 1, \"name\": \"mini\" }] as ItemType[],\r\n        size_enum_current: 0,\r\n        type_enum: [{ \"value\": 0, \"name\": \"default\" }, { \"value\": 1, \"name\": \"primary\" }, { \"value\": 2, \"name\": \"warn\" }] as ItemType[],\r\n        type_enum_current: 0,\r\n        count: 0,\r\n        text: 'uni-app-x'\r\n      }\r\n    },\r\n    methods: {\r\n      button_click() {\r\n        console.log(\"组件被点击时触发\")\r\n        this.count++\r\n      },\r\n      button_touchstart() { console.log(\"手指触摸动作开始\") },\r\n      button_touchmove() { console.log(\"手指触摸后移动\") },\r\n      button_touchcancel() { console.log(\"手指触摸动作被打断，如来电提醒，弹窗\") },\r\n      button_touchend() { console.log(\"手指触摸动作结束\") },\r\n      button_tap() { console.log(\"手指触摸后马上离开\") },\r\n      button_longpress() { console.log(\"如果一个组件被绑定了 longpress 事件，那么当用户长按这个组件时，该事件将会被触发。\") },\r\n      change_plain_boolean(checked : boolean) { this.plain_boolean = checked },\r\n      change_disabled_boolean(checked : boolean) { this.disabled_boolean = checked },\r\n      change_default_style(checked : boolean) { this.default_style = checked },\r\n      radio_change_size_enum(checked : number) { this.size_enum_current = checked },\r\n      radio_change_type_enum(checked : number) { this.type_enum_current = checked },\r\n      confirm_text_input(value : string) { this.text = value },\r\n      navigateToChild() {\r\n        uni.navigateTo({\r\n          url: 'buttonstatus',\r\n        })\r\n      },\r\n      //用于自动化测试\r\n      checkUniButtonElement() : boolean {\r\n        const button = uni.getElementById(\"testButton\")\r\n        if (button != null && button instanceof UniButtonElement) {\r\n          return true\r\n        }\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\n```\n:::","compatibility":"### button 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| disabled | 3.9 | 4.11 | 4.0 |\n| hover-class | 3.9 | 4.11 | 4.0 |\n| hover-start-time | 3.9 | 4.11 | 4.0 |\n| hover-stay-time | 3.9 | 4.11 | 4.0 |\n| size | 3.9 | 4.11 | 4.0 |\n| type | 3.9 | 4.11 | 4.0 |\n| plain | 3.9 | 4.11 | 4.0 |\n| loading | x | x | 4.0 |\n| form-type | 3.9 | 4.11 | 4.0 |\n","children":"","reference":"\n### 参见\n- [参见uni-app相关文档](https://uniapp.dcloud.io/component/button)\n- [参见uni-app x相关文档](https://doc.dcloud.net.cn/uni-app-x/component/button.html)\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.button)\n"},"checkbox":{"name":"## checkbox","description":"> 组件类型：UniCheckboxElement \n\n 多选项。在1组check-group中可选择多个\n\n### checkbox 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.0 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| disabled | boolean | false | 是否禁用 |\n| value | string | - | checkbox 标识，选中时触发 checkbox-group 的 change 事件，并携带 checkbox 的 value |\n| checked | boolean | false | 当前是否选中，可用来设置默认选中 |\n| color | string([string.ColorString](/uts/data-type.md#ide-string)) | \"#007aff\" | checkbox的颜色 |\n| backgroundColor | string([string.ColorString](/uts/data-type.md#ide-string)) | \"#ffffff\" | checkbox默认的背景颜色 |\n| borderColor | string([string.ColorString](/uts/data-type.md#ide-string)) | \"#d1d1d1\" | checkbox默认的边框颜色 |\n| activeBackgroundColor | string([string.ColorString](/uts/data-type.md#ide-string)) | \"#ffffff\" | checkbox选中时的背景颜色 |\n| activeBorderColor | string([string.ColorString](/uts/data-type.md#ide-string)) | \"#d1d1d1\" | checkbox选中时的边框颜色 |\n| iconColor | string([string.ColorString](/uts/data-type.md#ide-string)) | \"#007aff\" | checkbox的图标颜色，优先级大于color属性 |","event":"","example":"### 示例 \n> [hello uni-app x](https://gitcode.net/dcloud/hello-uni-app-x/-/blob/alpha/pages/component/checkbox/checkbox.uvue) \n ::: preview https://hellouniappx.dcloud.net.cn/web/#/pages/component/checkbox/checkbox\n>Template\n```vue\n\r\n\r\n<template>\r\n  <view class=\"main\">\r\n    <checkbox :disabled=\"disabled_boolean\" :checked=\"checked_boolean\" :color=\"color_input\"\r\n      :backgroundColor=\"backgroundColor_input\" :borderColor=\"borderColor_input\"\r\n      :activeBackgroundColor=\"activeBackgroundColor_input\" :activeBorderColor=\"activeBorderColor_input\"\r\n      :iconColor=\"iconColor_input\" @click=\"checkbox_click\" @touchstart=\"checkbox_touchstart\"\r\n      @touchmove=\"checkbox_touchmove\" @touchcancel=\"checkbox_touchcancel\" @touchend=\"checkbox_touchend\"\r\n      @tap=\"checkbox_tap\" @longpress=\"checkbox_longpress\"><text>uni-app-x</text></checkbox>\r\n  </view>\r\n\r\n  <scroll-view style=\"flex: 1\">\r\n    <view class=\"content\">\r\n      <page-head title=\"组件属性\"></page-head>\r\n      <boolean-data :defaultValue=\"false\" title=\"当前是否选中，可用来设置默认选中\" @change=\"change_checked_boolean\"></boolean-data>\r\n      <boolean-data :defaultValue=\"false\" title=\"是否禁用\" @change=\"change_disabled_boolean\"></boolean-data>\r\n      <input-data defaultValue=\"#007aff\" title=\"checkbox的颜色\" type=\"text\" @confirm=\"confirm_color_input\"></input-data>\r\n      <input-data defaultValue=\"#ffffff\" title=\"checkbox默认的背景颜色\" type=\"text\"\r\n        @confirm=\"confirm_backgroundColor_input\"></input-data>\r\n      <input-data defaultValue=\"#d1d1d1\" title=\"checkbox默认的边框颜色\" type=\"text\"\r\n        @confirm=\"confirm_borderColor_input\"></input-data>\r\n      <input-data defaultValue=\"#ffffff\" title=\"checkbox选中时的背景颜色\" type=\"text\"\r\n        @confirm=\"confirm_activeBackgroundColor_input\"></input-data>\r\n      <input-data defaultValue=\"#d1d1d1\" title=\"checkbox选中时的边框颜色\" type=\"text\"\r\n        @confirm=\"confirm_activeBorderColor_input\"></input-data>\r\n      <input-data defaultValue=\"#007aff\" title=\"checkbox的图标颜色，优先级大于color属性\" type=\"text\"\r\n        @confirm=\"confirm_iconColor_input\"></input-data>\r\n    </view>\r\n\r\n    <view>\r\n      <page-head title=\"默认及使用\"></page-head>\r\n      <view class=\"uni-padding-wrap uni-common-mt\">\r\n        <view class=\"uni-title uni-common-mt\">\r\n          <text class=\"uni-title-text\"> 默认样式 </text>\r\n        </view>\r\n        <view>\r\n          <checkbox-group class=\"uni-flex uni-row checkbox-group\" @change=\"testChange\" style=\"flex-wrap: wrap\">\r\n            <checkbox value=\"cb\" :checked=\"checked\" :color=\"color\" style=\"margin-right: 15px\" class=\"checkbox cb\">选中\r\n            </checkbox>\r\n            <checkbox value=\"cb1\" style=\"margin-right: 15px\" class=\"checkbox cb1\">{{ text }}</checkbox>\r\n            <checkbox value=\"cb2\" :disabled=\"disabled\" class=\"checkbox cb2\">禁用</checkbox>\r\n            <checkbox value=\"cb3\" style=\"margin-top: 10px\" class=\"checkbox cb3\">\r\n              {{ wrapText }}\r\n            </checkbox>\r\n          </checkbox-group>\r\n        </view>\r\n        <view class=\"uni-title uni-common-mt\">\r\n          <text class=\"uni-title-text\"> 不同颜色和尺寸的checkbox </text>\r\n        </view>\r\n        <view>\r\n          <checkbox-group class=\"uni-flex uni-row checkbox-group\">\r\n            <checkbox value=\"cb1\" :checked=\"true\" color=\"#FFCC33\" style=\"transform: scale(0.7); margin-right: 15px\"\r\n              class=\"checkbox\">选中\r\n            </checkbox>\r\n            <checkbox value=\"cb\" color=\"#FFCC33\" style=\"transform: scale(0.7)\" class=\"checkbox\">未选中</checkbox>\r\n          </checkbox-group>\r\n        </view>\r\n      </view>\r\n\r\n      <view class=\"uni-padding-wrap\">\r\n        <view class=\"uni-title uni-common-mt\">\r\n          <text class=\"uni-title-text\"> 推荐展示样式 </text>\r\n        </view>\r\n      </view>\r\n      <view class=\"uni-list uni-common-pl\">\r\n        <checkbox-group @change=\"checkboxChange\" class=\"checkbox-group\">\r\n          <checkbox class=\"uni-list-cell uni-list-cell-pd checkbox\" v-for=\"(item, index) in items\" :key=\"item.value\"\r\n            :value=\"item.value\" :checked=\"item.checked\" :class=\"index < items.length - 1 ? 'uni-list-cell-line' : ''\">\r\n            {{ item.name }}\r\n          </checkbox>\r\n        </checkbox-group>\r\n      </view>\r\n    </view>\r\n  </scroll-view>\r\n</template>\r\n\r\n<style>\r\n  .main {\r\n    max-height: 250px;\r\n    padding: 5px 0;\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.06);\r\n    flex-direction: row;\r\n    justify-content: center;\r\n  }\r\n\r\n  .main .list-item {\r\n    width: 100%;\r\n    height: 100px;\r\n    border: 1px solid #666;\r\n  }\r\n\r\n  .uni-list-cell {\r\n    justify-content: flex-start;\r\n  }\r\n</style>\n\n```\n>Script\n```uts\n\r\n  type ItemType = {\r\n    value : string\r\n    name : string\r\n    checked : boolean\r\n  }\r\n  export default {\r\n    data() {\r\n      return {\r\n        items: [\r\n          {\r\n            value: 'CHN',\r\n            name: '中国',\r\n            checked: true,\r\n          },\r\n          {\r\n            value: 'USA',\r\n            name: '美国',\r\n            checked: false,\r\n          },\r\n          {\r\n            value: 'BRA',\r\n            name: '巴西',\r\n            checked: false,\r\n          },\r\n          {\r\n            value: 'JPN',\r\n            name: '日本',\r\n            checked: false,\r\n          },\r\n          {\r\n            value: 'ENG',\r\n            name: '英国',\r\n            checked: false,\r\n          },\r\n          {\r\n            value: 'FRA',\r\n            name: '法国',\r\n            checked: false,\r\n          },\r\n        ] as ItemType[],\r\n\r\n        text: '未选中',\r\n        wrapText: 'uni-app x，终极跨平台方案\\nuts，大一统语言',\r\n        value: [] as string[],\r\n        disabled: true,\r\n        checked: true,\r\n        color: '#007aff',\r\n        // 组件属性 autotest\r\n        checked_boolean: false,\r\n        disabled_boolean: false,\r\n        color_input: \"#007aff\",\r\n        backgroundColor_input: \"#ffffff\",\r\n        borderColor_input: \"#d1d1d1\",\r\n        activeBackgroundColor_input: \"#ffffff\",\r\n        activeBorderColor_input: \"#d1d1d1\",\r\n        iconColor_input: \"#007aff\"\r\n      }\r\n    },\r\n    methods: {\r\n      checkboxChange: function (e : UniCheckboxGroupChangeEvent) {\r\n        const selectedNames : string[] = []\r\n        this.items.forEach((item) => {\r\n          if (e.detail.value.includes(item.value)) {\r\n            selectedNames.push(item.name)\r\n          }\r\n        })\r\n        uni.showToast({\r\n          icon: 'none',\r\n          title: '当前选中:' + selectedNames.join(','),\r\n        })\r\n      },\r\n      testChange: function (e : UniCheckboxGroupChangeEvent) {\r\n        this.value = e.detail.value\r\n      },\r\n      checkbox_click() { console.log(\"组件被点击时触发\") },\r\n      checkbox_touchstart() { console.log(\"手指触摸动作开始\") },\r\n      checkbox_touchmove() { console.log(\"手指触摸后移动\") },\r\n      checkbox_touchcancel() { console.log(\"手指触摸动作被打断，如来电提醒，弹窗\") },\r\n      checkbox_touchend() { console.log(\"手指触摸动作结束\") },\r\n      checkbox_tap() { console.log(\"手指触摸后马上离开\") },\r\n      checkbox_longpress() { console.log(\"如果一个组件被绑定了 longpress 事件，那么当用户长按这个组件时，该事件将会被触发。\") },\r\n      change_checked_boolean(checked : boolean) { this.checked_boolean = checked },\r\n      change_disabled_boolean(checked : boolean) { this.disabled_boolean = checked },\r\n      confirm_color_input(value : string) { this.color_input = value },\r\n      confirm_backgroundColor_input(value : string) { this.backgroundColor_input = value },\r\n      confirm_borderColor_input(value : string) { this.borderColor_input = value },\r\n      confirm_activeBackgroundColor_input(value : string) { this.activeBackgroundColor_input = value },\r\n      confirm_activeBorderColor_input(value : string) { this.activeBorderColor_input = value },\r\n      confirm_iconColor_input(value : string) { this.iconColor_input = value }\r\n    }\r\n  }\r\n\n```\n:::","compatibility":"### checkbox 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| disabled | 3.9 | 4.11 | 4.0 |\n| value | 3.9 | 4.11 | 4.0 |\n| checked | 3.9 | 4.11 | 4.0 |\n| color | 3.9 | 4.11 | 4.0 |\n| backgroundColor | 3.9 | 4.11 | 4.0 |\n| borderColor | 3.9 | 4.11 | 4.0 |\n| activeBackgroundColor | 3.9 | 4.11 | 4.0 |\n| activeBorderColor | 3.9 | 4.11 | 4.0 |\n| iconColor | 3.9 | 4.11 | 4.0 |\n","children":"","reference":"\n### 参见\n- [参见uni-app相关文档](https://uniapp.dcloud.io/component/checkbox)\n- [参见uni-app x相关文档](https://doc.dcloud.net.cn/uni-app-x/component/checkbox-group.html)\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.checkbox)\n"},"checkbox-group":{"name":"## checkbox-group","description":"> 组件类型：UniCheckboxGroupElement \n\n 多项组，内部由多个checkbox组成\n\n### checkbox-group 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.0 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| name | string | - | 表单的控件名称，作为键值对的一部分与表单(form组件)一同提交 |\n| @change | (event: [UniCheckboxGroupChangeEvent](#unicheckboxgroupchangeevent)) => void | - | checkbox-group中选中项发生改变是触发 change 事件，detail = {value:[选中的checkbox的value的数组\\]} |","event":"\n### 事件\n#### UniCheckboxGroupChangeEvent\n\n##### UniCheckboxGroupChangeEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniCheckboxGroupChangeEventDetail** | 是 | - | - |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| value | Array\\<string\\> | 是 | - | - |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniCheckboxGroupChangeEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n","example":"","compatibility":"### checkbox-group 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| name | 3.9 | 4.11 | 4.0 |\n| @change | 3.9 | 4.11 | 4.0 |\n","children":"### 子组件 @children-tags \n - [checkbox](#checkbox)","reference":"\n### 参见\n- [参见uni-app相关文档](https://uniapp.dcloud.io/component/checkbox)\n- [参见uni-app x相关文档](https://doc.dcloud.net.cn/uni-app-x/component/checkbox-group.html)\n"},"image":{"name":"## image","description":"> 组件类型：UniImageElement \n\n 图片\n\n### image 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.0 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| src | string([string.ImageURIString](/uts/data-type.md#ide-string)) | - | 图片资源地址 |\n| mode | string | \"scaleToFill\" | 图片裁剪、缩放的模式 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| scaleToFill | 不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素 |\n@| aspectFit | 保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。 |\n@| aspectFill | 保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取 |\n@| widthFix | 宽度不变，高度自动变化，保持原图宽高比不变 |\n@| heightFix | 高度不变，宽度自动变化，保持原图宽高比不变 |\n@| top | 不缩放图片，只显示图片的顶部区域 |\n@| bottom | 不缩放图片，只显示图片的底部区域 |\n@| center | 不缩放图片，只显示图片的中间区域 |\n@| left | 不缩放图片，只显示图片的左边区域 |\n@| right | 不缩放图片，只显示图片的右边区域 |\n@| top left | 不缩放图片，只显示图片的左上边区域 |\n@| top right | 不缩放图片，只显示图片的右上边区域 |\n@| bottom left | 不缩放图片，只显示图片的左下边区域 |\n@| bottom right | 不缩放图片，只显示图片的右下边区域 |\n| lazy-load | boolean | false | 图片懒加载。只针对page与scroll-view下的image有效 |\n| fade-show | boolean | false | 图片显示动画效果 |\n| draggable | boolean | false | 鼠标长按是否能拖动图片(仅H5平台) |\n| @error | (event: [UniImageErrorEvent](#uniimageerrorevent)) => void | - | 图片加载错误时触发，event.detail = { errMsg } |\n| @load | (event: [UniImageLoadEvent](#uniimageloadevent)) => void | - | 图片加载完成时触发，event.detail = { width: '图片宽度px', height: '图片高度px' } |\n\n#### mode 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| scaleToFill | 3.9 | 4.11 | 4.0 |\n| aspectFit | 3.9 | 4.11 | 4.0 |\n| aspectFill | 3.9 | 4.11 | 4.0 |\n| widthFix | 3.9 | 4.11 | 4.0 |\n| heightFix | 3.9 | 4.11 | 4.0 |\n| top | 3.9 | 4.11 | 4.0 |\n| bottom | 3.9 | 4.11 | 4.0 |\n| center | 3.9 | 4.11 | 4.0 |\n| left | 3.9 | 4.11 | 4.0 |\n| right | 3.9 | 4.11 | 4.0 |\n| top left | 3.9 | 4.11 | 4.0 |\n| top right | 3.9 | 4.11 | 4.0 |\n| bottom left | 3.9 | 4.11 | 4.0 |\n| bottom right | 3.9 | 4.11 | 4.0 |\n","event":"\n### 事件\n#### UniImageErrorEvent\n\n##### UniImageErrorEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniImageErrorEventDetail** | 是 | - |  |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| errMsg | string | 是 | - | 错误信息 |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniImageErrorEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n\n#### UniImageLoadEvent\n\n##### UniImageLoadEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniImageLoadEventDetail** | 是 | - |  |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| width | number | 是 | - | 图片宽度 |\n@| height | number | 是 | - | 图片高度 |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniImageLoadEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n","example":"### 示例 \n> [hello uni-app x](https://gitcode.net/dcloud/hello-uni-app-x/-/blob/alpha/pages/component/image/image.uvue) \n ::: preview https://hellouniappx.dcloud.net.cn/web/#/pages/component/image/image\n>Template\n```vue\n<template>\r\n  <view style=\"flex: 1;\">\r\n    <page-head :title=\"title\"></page-head>\r\n    <view class=\"uni-padding-wrap uni-common-mt\">\r\n      <view class=\"uni-center\" style=\"background:#FFFFFF;\">\r\n        <image class=\"image\" :fade-show=\"true\" mode=\"widthFix\" :src=\"imageSrc\" @error=\"error\" @load=\"load\"></image>\r\n      </view>\r\n      <view class=\"uni-btn-v\">\r\n        <button type=\"primary\" @tap=\"imageFormat\">图片格式示例</button>\r\n      </view>\r\n      <view class=\"uni-btn-v\">\r\n        <button type=\"primary\" @tap=\"imageMode\">图片缩放模式示例</button>\r\n      </view>\r\n      <view class=\"uni-btn-v\">\r\n        <button type=\"primary\" @tap=\"imagePath\">图片路径示例</button>\r\n      </view>\r\n      <view class=\"uni-btn-v\">\r\n        <button type=\"primary\" @tap=\"imageLarge\">大图示例</button>\r\n      </view>\r\n    </view>\n    <view v-if=\"autoTest\">\n      <image :src=\"setCookieImage\"></image>\n      <image :src=\"verifyCookieImage\" @error=\"error\"></image>\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<style>\r\n  .image {\r\n    margin: 20px auto;\r\n    width: 100px;\r\n  }\r\n</style>\n\n```\n>Script\n```uts\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        title: 'image',\r\n        imageSrc: \"/static/test-image/logo.png\" as string.ImageURIString,\r\n        loadError: false,\n        // 自动化测试\n        autoTest: false,\n        setCookieImage: \"\",\n        verifyCookieImage: \"\"\r\n      }\r\n    },\r\n    methods: {\r\n      error(event : ImageErrorEvent) {\r\n        this.loadError = true\r\n        console.log(event.type, event.detail);\r\n      },\r\n      load(event : ImageLoadEvent) {\r\n        console.log(event.type, event.detail);\r\n      },\r\n      imageFormat() {\r\n        uni.navigateTo({\r\n          url: '/pages/component/image/image-format'\r\n        });\r\n      },\r\n      imageMode() {\r\n        uni.navigateTo({\r\n          url: '/pages/component/image/image-mode'\r\n        });\r\n      },\r\n      imagePath() {\r\n        uni.navigateTo({\r\n          url: '/pages/component/image/image-path'\r\n        });\r\n      },\r\n      imageLarge() {\r\n        uni.navigateTo({\r\n          url: '/pages/component/image/image-large'\r\n        });\r\n      }\r\n    }\r\n  }\r\n\n```\n:::","compatibility":"### image 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| src | 3.9 | 4.11 | 4.0 |\n| mode | 3.9 | 4.11 | 4.0 |\n| lazy-load | x | 4.11 | x |\n| fade-show | 3.9 | x | x |\n| draggable | x | x | 4.0 |\n| @error | 3.9 | 4.11 | 4.0 |\n| @load | 3.9 | 4.11 | 4.0 |\n","children":"### 子组件 @children-tags \n 不可以嵌套组件","reference":"\n### 参见\n- [参见uni-app相关文档](https://uniapp.dcloud.io/component/image)\n- [参见uni-app x相关文档](https://doc.dcloud.net.cn/uni-app-x/component/image.html)\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.image)\n"},"input":{"name":"## input","description":"> 组件类型：[UniInputElement](#uniinputelement) \n\n 输入框\n\n### input 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.0 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| name | string | - | 表单的控件名称，作为键值对的一部分与表单(form组件)一同提交 |\n| disabled | boolean | false | 是否禁用 |\n| value | string | \"\" | 输入框的初始内容 |\n| type | text \\| number \\| digit \\| tel | \"text\" | input的类型 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| text | 文本输入键盘 |\n@| number | 数字输入键盘 |\n@| digit | 带小数点数字输入键盘 |\n@| tel | 电话输入键盘 |\n| password | boolean | false | 是否是密码类型 |\n| placeholder | string | \"\" | 输入框为空时占位符 |\n| placeholder-style | string | \"\" | 指定 placeholder 的样式 |\n| placeholder-class | string([string.ClassString](/uts/data-type.md#ide-string)) | \"\" | 指定 placeholder 的样式类，目前仅支持color,font-size和font-weight |\n| maxlength | number | \"不限制长度\" | 最大输入长度，0和正数为合法值，非法值的时候不限制最大长度 |\n| cursor-spacing | number | 0 | 指定光标与键盘的距离，单位 px 。取 input 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离 |\n| cursor-color | string([string.ColorString](/uts/data-type.md#ide-string)) | \"\" | 指定光标颜色 |\n| auto-focus | boolean | false | 自动获取焦点 |\n| focus | boolean | false | 获取焦点 |\n| confirm-type | send \\| search \\| next \\| go \\| done | \"done\" | 设置键盘右下角按钮的文字 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| send | 发送 |\n@| search | 搜索 |\n@| next | 下一个 |\n@| go | 前往 |\n@| done | 完成 |\n| confirm-hold | boolean | false | 点击键盘右下角按钮时是否保持键盘不收起 |\n| cursor | number | 0 | 指定focus时的光标位置 |\n| selection-start | number | -1 | 光标起始位置，自动聚集时有效，需与selection-end搭配使用 |\n| selection-end | number | -1 | 光标结束位置，自动聚集时有效，需与selection-satrt搭配使用 |\n| adjust-position | boolean | true | 键盘弹起时，是否自动上推页面 |\n| hold-keyboard | boolean | false | focus时，点击页面的时候不收起键盘 |\n| inputmode | none \\| text \\| decimal \\| numeric \\| tel \\| search \\| email \\| url | \"text\" | 是一个枚举属性，它提供了用户在编辑元素或其内容时可能输入的数据类型的提示。在符合条件的高版本webview里，uni-app的 web 和 app-vue 平台中可使用本属性。 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| none | 无虚拟键盘。在应用程序或者站点需要实现自己的键盘输入控件时很有用。 |\n@| text | 使用用户本地区域设置的标准文本输入键盘。 |\n@| decimal | 小数输入键盘，包含数字和分隔符（通常是“ . ”或者“ , ”），设备可能也可能不显示减号键。 |\n@| numeric | 数字输入键盘，所需要的就是 0 到 9 的数字，设备可能也可能不显示减号键。 |\n@| tel | 电话输入键盘，包含 0 到 9 的数字、星号（*）和井号（#）键。表单输入里面的电话输入通常应该使用 \\<input type=\"tel\"\\> 。 |\n@| search | 为搜索输入优化的虚拟键盘，比如，返回键可能被重新标记为“搜索”，也可能还有其他的优化。 |\n@| email | 为邮件地址输入优化的虚拟键盘，通常包含\"@\"符号和其他优化。表单里面的邮件地址输入应该使用 \\<input type=\"email\"\\> 。 |\n@| url | 为网址输入优化的虚拟键盘，比如，“/”键会更加明显、历史记录访问等。表单里面的网址输入通常应该使用 \\<input type=\"url\"\\> 。 |\n| @input | (event: [UniInputEvent](#uniinputevent)) => void | - | 当键盘输入时，触发input事件，event.detail = {value, cursor}，处理函数可以直接 return 一个字符串，将替换输入框的内容。 |\n| @focus | (event: [UniInputFocusEvent](#uniinputfocusevent)) => void | - | 输入框聚焦时触发，event.detail = { value, height }，height 为键盘高度 |\n| @blur | (event: [UniInputBlurEvent](#uniinputblurevent)) => void | - | 输入框失去焦点时触发，event.detail = {value: value} |\n| @keyboardheightchange | (event: [UniInputKeyboardHeightChangeEvent](#uniinputkeyboardheightchangeevent)) => void | - | 键盘高度发生变化的时候触发此事件，event.detail = {height: height, duration: duration} |\n| @confirm | (event: [UniInputConfirmEvent](#uniinputconfirmevent)) => void | - | 点击完成按钮时触发，event.detail = {value: value} |\n\n#### type 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| text | 3.9 | 4.11 | 4.0 |\n| number | 3.9 | 4.11 | 4.0 |\n| digit | 3.9 | 4.11 | 4.0 |\n| tel | 3.9 | 4.11 | x |\n\n\n#### confirm-type 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| send | 3.9 | 4.11 | 4.0 |\n| search | 3.9 | 4.11 | 4.0 |\n| next | 3.9 | 4.11 | 4.0 |\n| go | 3.9 | 4.11 | 4.0 |\n| done | 3.9 | 4.11 | 4.0 |\n\n\n#### inputmode 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| none | x | x | 4.0 |\n| text | x | x | 4.0 |\n| decimal | x | x | 4.0 |\n| numeric | x | x | 4.0 |\n| tel | x | x | 4.0 |\n| search | x | x | 4.0 |\n| email | x | x | 4.0 |\n| url | x | x | 4.0 |\n","event":"\n### 事件\n#### UniInputEvent\n\n##### UniInputEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniInputEventDetail** | 是 | - | - |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| value | string | 是 | - | 输入框内容 |\n@| cursor | number | 是 | - | 光标的位置 |\n@| keyCode | number | 是 | - | 输入字符的Unicode值 |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniInputEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n\n#### UniInputFocusEvent\n\n##### UniInputFocusEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniInputFocusEventDetail** | 是 | - | - |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| height | number | 是 | - | 键盘高度 |\n@| value | string | 是 | - | 输入框内容 |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n###### UniInputFocusEventDetail 兼容性 \n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| height | 3.9 | 4.11 | x |\n\n##### UniInputFocusEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n\n#### UniInputBlurEvent\n\n##### UniInputBlurEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniInputBlurEventDetail** | 是 | - | - |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| value | string | 是 | - | 输入框内容 |\n@| cursor | number | 是 | - | 选择区域的起始位置 |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniInputBlurEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n\n#### UniInputKeyboardHeightChangeEvent\n\n##### UniInputKeyboardHeightChangeEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniInputKeyboardHeightChangeEventDetail** | 是 | - | - |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| height | number | 是 | - | 键盘高度 |\n@| duration | number | 是 | - | 持续时间 |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniInputKeyboardHeightChangeEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n\n#### UniInputConfirmEvent\n\n##### UniInputConfirmEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniInputConfirmEventDetail** | 是 | - | - |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| value | string | 是 | - | 输入框内容 |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniInputConfirmEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n","example":"### 示例 \n> [hello uni-app x](https://gitcode.net/dcloud/hello-uni-app-x/-/blob/alpha/pages/component/input/input.uvue) \n ::: preview https://hellouniappx.dcloud.net.cn/web/#/pages/component/input/input\n>Template\n```vue\n<template>\r\n  <!-- #ifdef APP -->\r\n  <scroll-view style=\"flex: 1\">\r\n  <!-- #endif -->\r\n    <page-head :title=\"title\"></page-head>\r\n    <view class=\"uni-common-mt uni-padding-wrap\">\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">设置输入框的初始内容</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-default\" class=\"uni-input\" value=\"hello uni-app x\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">type取值（不同输入法表现可能不一致）</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-type-text\" class=\"uni-input\" type=\"text\" placeholder=\"文本输入键盘\" />\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-type-number\" class=\"uni-input\" type=\"number\" placeholder=\"数字输入键盘\" />\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-type-digit\" class=\"uni-input\" type=\"digit\" placeholder=\"带小数点的数字输入键盘\" />\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-type-tel\" class=\"uni-input\" :type=\"inputTypeTel\" placeholder=\"电话输入键盘\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">密码输入框</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-password\" class=\"uni-input\" :password=\"inputPassword\" :value=\"inputPasswordValue\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">占位符样式</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-placeholder1\" class=\"uni-input\" :placeholder-style=\"inputPlaceHolderStyle\"\r\n            placeholder=\"占位符文字颜色为红色\" />\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-placeholder2\" class=\"uni-input\" :placeholder-class=\"inputPlaceHolderClass\"\r\n            placeholder=\"占位符字体大小为10px\" />\r\n        </view>\n        <view class=\"input-wrapper\">\n          <input class=\"uni-input\" :placeholder-style=\"inputPlaceHolderStyle\"\n            value=\"不设置placeholder只设置placeholder-style\" />\n        </view>\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">设置禁用输入框</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-disable\" class=\"uni-input\" :disabled=\"true\"/>\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">设置最大输入长度</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-maxlength\" class=\"uni-input\" :maxlength=\"10\" placeholder=\"最大输入长度为10\"\r\n            :value=\"inputMaxLengthValue\" @input=\"onMaxLengthInput\" :focus=\"inputMaxLengthFocus\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">设置光标与键盘的距离</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" :cursor-spacing=\"1000\" placeholder=\"光标与键盘的距离为1000px\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">自动获取焦点</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-focus\" class=\"uni-input\" :focus=\"focus\"\r\n            @keyboardheightchange=\"inputFocusKeyBoardChange\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">confirm-type取值（不同输入法表现可能不一致）</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-confirm-send\" class=\"uni-input\" confirmType=\"send\" placeholder=\"键盘右下角按钮显示为发送\" />\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-confirm-search\" class=\"uni-input\" confirmType=\"search\" placeholder=\"键盘右下角按钮显示为搜索\" />\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-confirm-next\" class=\"uni-input\" confirmType=\"next\" placeholder=\"键盘右下角按钮显示为下一个\" />\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-confirm-go\" class=\"uni-input\" confirmType=\"go\" placeholder=\"键盘右下角按钮显示为前往\" />\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-confirm-done\" class=\"uni-input\" confirmType=\"done\" placeholder=\"键盘右下角按钮显示为完成\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">点击键盘右下角按钮时保持键盘不收起</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" :confirm-hold=\"true\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\" @click=\"setCursor(4)\">\r\n          <text class=\"uni-title-text\">设置输入框聚焦时光标的位置（点击生效）</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input ref=\"input\" class=\"uni-input\" value=\"0123456789\" :cursor=\"cursor\" @blur=\"onCursorBlurChange\"/>\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\" @click=\"setSelection(0, 4)\">\r\n          <text class=\"uni-title-text\">设置输入框聚焦时光标的起始位置和结束位置（点击生效）</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input ref=\"input2\" class=\"uni-input\" value=\"0123456789\" :selection-start=\"selectionStart\"\r\n            :selection-end=\"selectionEnd\" @blur=\"onSelectionBlurChange\"/>\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\" style=\"flex-direction: row;align-items: center;\">\r\n          <text class=\"uni-title-text\">设置光标颜色为红色</text>\r\n          <switch style=\"margin-left: 10px;\" @change=\"changeCursorColor\" :checked=\"cursor_color=='red'\"></switch>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input id=\"uni-input-cursor-color\" class=\"uni-input\" :cursor-color=\"cursor_color\" value=\"光标颜色\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">键盘弹起时，自动上推页面</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" :adjust-position=\"true\" />\r\n        </view>\r\n      </view>\r\n\r\n\r\n      <view>\r\n        <view class=\"uni-title\" style=\"flex-direction: row;align-items: center;\">\r\n          <text class=\"uni-title-text\">设置hold-keyboard</text>\r\n          <switch style=\"margin-left: 10px;\" @change=\"changeHoldKeyboard\" :checked=\"holdKeyboard\"></switch>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" :hold-keyboard=\"holdKeyboard\" value=\"hold keyboard \" />\r\n        </view>\r\n      </view>\r\n\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">input事件</text>\r\n          <text class=\"uni-subtitle-text\" v-if=\"inputEventDetail\">{{inputEventDetail}}</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" @input=\"onInput\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">focus事件和blur事件</text>\r\n          <text class=\"uni-subtitle-text\" v-if=\"focusAndBlurEventDetail\">{{focusAndBlurEventDetail}}</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" @focus=\"onFocus\" @blur=\"onBlur\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">confirm事件</text>\r\n          <text class=\"uni-subtitle-text\" v-if=\"confirmEventDetail\">{{confirmEventDetail}}</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" @confirm=\"onConfirm\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">keyboardheightchange事件</text>\r\n          <text class=\"uni-subtitle-text\"\r\n            v-if=\"keyboardHeightChangeEventDetail\">{{keyboardHeightChangeEventDetail}}</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" @keyboardheightchange=\"onKeyborardHeightChange\" />\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">带清除按钮的输入框</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" placeholder=\"带清除按钮的输入框\" :value=\"inputClearValue\" @input=\"clearInput\" />\r\n          <image class=\"uni-icon\" src=\"/static/icons/clear.png\" v-if=\"showClearIcon\" @click=\"clearIcon\">\r\n          </image>\r\n        </view>\r\n      </view>\r\n\r\n      <view>\r\n        <view class=\"uni-title\">\r\n          <text class=\"uni-title-text\">可查看密码的输入框</text>\r\n        </view>\r\n        <view class=\"input-wrapper\">\r\n          <input class=\"uni-input\" placeholder=\"请输入密码\" :password=\"showPassword\" />\r\n          <image class=\"uni-icon\" :src=\"!showPassword ? '/static/icons/eye-active.png' : '/static/icons/eye.png'\"\r\n            @click=\"changePassword\"></image>\r\n        </view>\r\n      </view>\r\n    </view>\r\n  <!-- #ifdef APP -->\r\n  </scroll-view>\r\n  <!-- #endif -->\r\n</template>\r\n\r\n\r\n<style scoped>\r\n  .input-wrapper {\r\n    display: flex;\r\n    padding: 8px 13px;\r\n    margin: 5px 0;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    background-color: #ffffff;\r\n  }\r\n\r\n  .uni-input {\r\n    height: 28px;\r\n    font-size: 15px;\r\n    padding: 0px;\r\n    flex: 1;\r\n    background-color: #ffffff;\r\n  }\r\n\r\n  .uni-icon {\r\n    width: 24px;\r\n    height: 24px;\r\n  }\r\n\r\n  .uni-input-placeholder-class {\r\n    font-size: 10px;\r\n  }\r\n</style>\n\n```\n>Script\n```uts\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        title: 'input',\r\n        showClearIcon: false,\r\n        inputClearValue: '',\r\n        showPassword: true,\r\n        cursor: -1,\r\n        cursor_color: \"#3393E2\",\r\n        selectionStart: -1,\r\n        selectionEnd: -1,\r\n        inputEventDetail: '',\r\n        focusAndBlurEventDetail: '',\r\n        confirmEventDetail: '',\r\n        keyboardHeightChangeEventDetail: '',\r\n        focus: true,\r\n        inputPassword: true,\r\n        inputTypeTel: \"tel\",\r\n        inputPlaceHolderStyle: \"color:red\",\r\n        inputPlaceHolderClass: \"uni-input-placeholder-class\" as string.ClassString ,\r\n        inputMaxLengthValue: \"\",\r\n        onMaxLengthInputValue: \"\",\r\n        inputMaxLengthFocus: false,\r\n        inputPasswordValue: \"cipher\",\r\n        inputFocusKeyBoardChangeValue: true,\r\n        holdKeyboard: false,\n      }\r\n    },\r\n    methods: {\r\n      inputFocusKeyBoardChange(e : UniInputKeyboardHeightChangeEvent) {\r\n        this.inputFocusKeyBoardChangeValue = e.detail.height > 50\r\n      },\r\n      onMaxLengthInput(event : UniInputEvent) {\r\n        this.onMaxLengthInputValue = event.detail.value\r\n      },\r\n      setCursor: function (cursor : number) {\r\n        (this.$refs['input'] as UniInputElement).focus();\r\n        this.cursor = cursor;\n      },\n      onCursorBlurChange(){\n        this.cursor = 0\n      },\r\n      setSelection: function (selectionStart : number, selectionEnd : number) {\r\n        (this.$refs['input2'] as UniInputElement).focus();\r\n        this.selectionStart = selectionStart;\r\n        this.selectionEnd = selectionEnd;\n      },\n      onSelectionBlurChange(){\n        this.selectionEnd = 0;\n      },\r\n      clearInput: function (event : UniInputEvent) {\r\n        this.inputClearValue = event.detail.value\r\n        if (event.detail.value.length > 0) {\r\n          this.showClearIcon = true\r\n        } else {\r\n          this.showClearIcon = false\r\n        }\r\n      },\r\n      clearIcon: function () {\r\n        this.inputClearValue = ''\r\n        this.showClearIcon = false\r\n      },\r\n      changePassword: function () {\r\n        this.showPassword = !this.showPassword\r\n      },\r\n      onInput: function (event : UniInputEvent) {\r\n        console.log(\"键盘输入\", JSON.stringify(event.detail));\r\n        this.inputEventDetail = JSON.stringify(event.detail)\r\n      },\r\n      onFocus: function (event : UniInputFocusEvent) {\r\n        console.log(\"输入框聚焦\", JSON.stringify(event.detail));\r\n        this.focusAndBlurEventDetail = JSON.stringify(event.detail);\r\n      },\r\n      onBlur: function (event : UniInputBlurEvent) {\r\n        console.log(\"输入框失去焦点\", JSON.stringify(event.detail));\r\n        this.focusAndBlurEventDetail = JSON.stringify(event.detail);\r\n      },\r\n      onConfirm: function (event : UniInputConfirmEvent) {\r\n        console.log(\"点击完成按钮\", JSON.stringify(event.detail));\r\n        this.confirmEventDetail = JSON.stringify(event.detail);\r\n      },\r\n      onKeyborardHeightChange: function (event : UniInputKeyboardHeightChangeEvent) {\r\n        console.log(\"键盘高度发生变化\", JSON.stringify(event.detail));\r\n        this.keyboardHeightChangeEventDetail = JSON.stringify(event.detail);\r\n      },\r\n      test_check_input_value() : number {\r\n        return this.onMaxLengthInputValue.length\r\n      },\r\n      changeCursorColor(event : UniSwitchChangeEvent) {\r\n        const checked = event.detail.value;\r\n        if (checked) {\r\n          this.cursor_color = \"red\"\r\n        } else {\r\n          this.cursor_color = \"#3393E2\"\r\n        }\r\n        const input = uni.getElementById<UniInputElement>(\"uni-input-cursor-color\")\r\n        input?.focus()\r\n      },\r\n      changeHoldKeyboard(event : UniSwitchChangeEvent) {\r\n        const checked = event.detail.value;\r\n        this.holdKeyboard = checked\r\n      }\r\n    }\r\n  }\r\n\n```\n:::","compatibility":"### input 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| name | 3.9 | 4.11 | 4.0 |\n| disabled | 3.9 | 4.11 | 4.0 |\n| value | 3.9 | 4.11 | 4.0 |\n| type | 3.9 | 4.11 | 4.0 |\n| password | 3.9 | 4.11 | 4.0 |\n| placeholder | 3.9 | 4.11 | 4.0 |\n| placeholder-style | 3.9 | 4.11 | 4.0 |\n| placeholder-class | 3.9 | 4.11 | 4.0 |\n| maxlength | 3.9 | 4.11 | 4.0 |\n| cursor-spacing | 3.9 | 4.11 | x |\n| cursor-color | 3.99 | 4.11 | 4.0 |\n| auto-focus | 3.9 | 4.11 | 4.0 |\n| focus | 3.9 | 4.11 | 4.0 |\n| confirm-type | 3.9 | 4.11 | 4.0 |\n| confirm-hold | 3.9 | 4.11 | 4.0 |\n| cursor | 3.9 | 4.11 | 4.0 |\n| selection-start | 3.9 | 4.11 | 4.0 |\n| selection-end | 3.9 | 4.11 | 4.0 |\n| adjust-position | 3.9 | 4.11 | x |\n| hold-keyboard | 4.0 | 4.11 | x |\n| inputmode | x | x | 4.0 |\n| @input | 3.9 | 4.11 | 4.0 |\n| @focus | 3.9 | 4.11 | 4.0 |\n| @blur | 3.9 | 4.11 | 4.0 |\n| @keyboardheightchange | 3.9 | 4.11 | x |\n| @confirm | 3.9 | 4.11 | 4.0 |\n","children":"### 子组件 @children-tags \n 不可以嵌套组件","reference":"\n### 参见\n- [参见uni-app相关文档](https://uniapp.dcloud.io/component/input)\n- [参见uni-app x相关文档](https://doc.dcloud.net.cn/uni-app-x/component/input.html)\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.input)\n","component_type":"### UniInputElement\n\ninput元素对象\n#### UniInputElement 的属性值\n| 名称 | 类型 | 必填 | 描述 |\n| :- | :- | :- | :- |\n| name | string | 是 | 表单的控件名称，作为键值对的一部分与表单(form组件)一同提交\n |\n| type | string | 是 | input的类型\n |\n| disabled | boolean | 是 | 是否禁用\n |\n| autofocus | boolean | 是 | 自动获取焦点\n |\n| value | string | 是 | 输入框的初始内容\n |"},"list-item":{"name":"## list-item","description":"> 组件类型：UniListItemElement \n\n list-view组件的唯一合法子组件。每个item是一行\n\n### list-item 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.02 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| type | number | 0 | 对应list-item的类型 list-view 将对同类型条目进行复用，所以合理的类型拆分，可以很好地提升 list-view 性能 |","event":"","example":"","compatibility":"### list-item 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| type | 3.9 | x | 4.0 |\n","children":"","reference":""},"sticky-header":{"name":"## sticky-header","description":"> 组件类型：UniStickyHeaderElement \n\n 吸顶布局容器 \n\n 注意：暂时仅支持作为list-view、sticky-section的子节点, sticky-header不支持css样式！当一个容器视图设置多个sticky-header时，后一个sticky-header会停靠在前一个sticky-header的末尾处。\n\n### sticky-header 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.93 | 4.11 | 4.02 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| padding | array\\<number> | [0,0,0,0\\] | 长度为 4 的数组，按 top、right、bottom、left 顺序指定内边距  |","event":"","example":"### 示例 \n> [hello uni-app x](https://gitcode.net/dcloud/hello-uni-app-x/-/blob/alpha/pages/component/sticky-header/sticky-header.uvue) \n ::: preview https://hellouniappx.dcloud.net.cn/web/#/pages/component/sticky-header/sticky-header\n>Template\n```vue\n<template>\n  <list-view :scroll-y=\"true\" class=\"page\" rebound=\"false\" show-scrollbar=false :scroll-top=\"scroll_top_input\"\n    :refresher-enabled=\"refresher_enabled_boolean\" :refresher-triggered=\"refresher_triggered_boolean\"\n    @refresherrefresh=\"list_view_refresherrefresh\">\n    <list-item type=1>\n      <swiper indicator-dots=\"true\" circular=\"true\">\n        <swiper-item v-for=\"i in 3\" :item-id=\"i + ''\">\n          <image src=\"/static/shuijiao.jpg\" style=\"height: 240px; width: 100%;\"></image>\n          <text style=\"position: absolute;\">{{i}}</text>\n        </swiper-item>\n      </swiper>\n    </list-item>\n    <list-item class=\"content-item\" type=2>\n      <text class=\"text\">向上滑动页面，体验sticky-header吸顶效果。</text>\n    </list-item>\n    <sticky-header>\n      <scroll-view style=\"background-color: #f5f5f5; flex-direction: row;\" direction=\"horizontal\"\n        :show-scrollbar=\"false\">\n        <view style=\"align-self: flex-start; flex-direction: row;\">\n          <text ref=\"swipertab\" class=\"sift-item\" v-for=\"(name,index) in sift_item\" @click=\"clickTH(index)\">\n            {{name}}\n          </text>\n        </view>\n      </scroll-view>\n    </sticky-header>\n\n    <list-item v-for=\"(item,index) in list_item\" :key=\"index\" class=\"content-item\" type=3>\n      <text class=\"text\">{{item}}</text>\n    </list-item>\n  </list-view>\n</template>\n\n\n\n<style>\n  .page {\n    flex: 1;\n    background-color: #f5f5f5;\n  }\n\n  .content-item {\n    padding: 15px;\n    margin-bottom: 10px;\n    background-color: #fff;\n  }\n\n  .text {\n    font-size: 14px;\n    color: #666;\n    line-height: 20px;\n  }\n\n  .sift-item {\n    color: #555;\n    font-size: 16px;\n    padding: 12px 15px;\n  }\n</style>\n\n```\n>Script\n```uts\n\n  export default {\n    data() {\n      return {\n        sift_item: [\"排序\", \"筛选\"],\n        list_item: [] as Array<string>,\n        refresher_enabled_boolean: true,\n        refresher_triggered_boolean: false,\n        scroll_top_input: 0\n      }\n    },\n    onLoad() {\n      let lists : Array<string> = []\n      for (let i = 0; i < 40; i++) {\n        lists.push(\"item---\" + i)\n      }\n      this.list_item = lists\n    },\n    methods: {\n      list_view_refresherrefresh() {\n        console.log(\"下拉刷新被触发 \")\n        this.refresher_triggered_boolean = true\n        setTimeout(() => {\n          this.refresher_triggered_boolean = false\n        }, 1500)\n      },\n      confirm_scroll_top_input(value : number) {\n        this.scroll_top_input = value\n      },\n      clickTH(index : number) {\n        console.log(\"点击表头：\" + index);\n      }\n    }\n  }\n\n```\n:::","compatibility":"### sticky-header 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| padding | 3.98 | 4.11 | 4.02 |\n","children":"","reference":"\n### 参见\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.sticky-header)\n"},"sticky-section":{"name":"## sticky-section","description":"> 组件类型：UniStickySectionElement \n\n 吸顶布局容器 \n\n 注意：暂时仅支持作为list-view的子节点, sticky-section不支持css样式！\n\n### sticky-section 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.98 | 4.11 | 4.02 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| push-pinned-header | boolean | true | sticky-section元素重叠时是否继续上推 |\n| padding | array\\<number> | [0,0,0,0\\] | 长度为 4 的数组，按 top、right、bottom、left 顺序指定内边距  |","event":"","example":"### 示例 \n> [hello uni-app x](https://gitcode.net/dcloud/hello-uni-app-x/-/blob/alpha/pages/component/sticky-section/sticky-section.uvue) \n ::: preview https://hellouniappx.dcloud.net.cn/web/#/pages/component/sticky-section/sticky-section\n>Template\n```vue\n<template>\r\n  <page-head title=\"sticky-section\"></page-head>\r\n  <list-view id=\"list-view\" ref=\"list-view\" show-scrollbar=false class=\"page\" :scroll-into-view=\"scrollIntoView\"\r\n  @scroll=\"onScroll\" @scrollend=\"onScrollEnd\" rebound=\"false\">\n    <!-- #ifdef APP -->\r\n    <list-item style=\"padding: 10px; margin: 5px 0;align-items: center;\" :type = 20>\r\n      <button @click=\"gotoStickyHeader('C')\" size=\"mini\">跳转到id为C的sticky-header位置上</button>\r\n    </list-item>\n    <!-- #endif -->\r\n    <sticky-section v-for=\"(sectionText) in data\" :padding=\"sectionPadding\" :push-pinned-header=\"true\">\r\n      <sticky-header :header-id=\"sectionText\" :id=\"sectionText\">\r\n        <text class=\"sticky-header-text\">{{sectionText}}</text>\r\n      </sticky-header>\r\n      <list-item v-for=\"i in 10\" class=\"content-item\" :type=10>\r\n        <text class=\"text\">{{sectionText}}--item--content----{{i}}</text>\r\n      </list-item>\r\n    </sticky-section>\r\n    <list-item style=\"padding: 10px; margin: 5px 0;align-items: center;\" :type= 30>\r\n      <!-- <text style=\"color: #aaa\">到底了</text> -->\r\n      <button @click=\"toTop\" size=\"mini\">回到顶部</button>\r\n    </list-item>\r\n  </list-view>\r\n</template>\r\n\r\n\r\n\r\n<style>\r\n  .page {\r\n    flex: 1;\r\n    background-color: #f5f5f5;\r\n  }\r\n\r\n  .sticky-header-text {\r\n    font-size: 16px;\r\n    padding: 8px;\r\n    color: #959595;\r\n    background-color: #f5f5f5;\r\n  }\r\n\r\n  .content-item {\r\n    padding: 15px;\r\n    margin-bottom: 10px;\r\n    background-color: #fff;\r\n  }\r\n</style>\r\n\n```\n>Script\n```uts\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        data: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N'],\r\n        sectionPadding: [0, 10, 0, 10] as Array<number>,\r\n        scrollIntoView: \"\",\r\n        scrolling: false\r\n      }\r\n    },\r\n    methods: {\r\n      toTop(){\r\n        this.scrollIntoView = \"\"\r\n        uni.getElementById(\"list-view\")!.scrollTop = 0\r\n      },\r\n      //用于自动化测试\r\n      listViewScrollByY(y : number) {\r\n        const listview = this.$refs[\"list-view\"] as UniElement\r\n        listview.scrollBy(0, y)\r\n      },\r\n      gotoStickyHeader(id : string) {\r\n        this.scrollIntoView = id\r\n      },\r\n      onScroll() {\r\n        this.scrolling = true\r\n      },\r\n      onScrollEnd() {\r\n        this.scrolling = false\r\n        //滚动后重置scrollIntoView = \"\"\r\n        if(this.scrollIntoView != \"\") {\r\n          this.scrollIntoView = \"\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n```\n:::","compatibility":"### sticky-section 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| push-pinned-header | 3.98 | 4.11 | x |\n| padding | 3.98 | 4.11 | 4.02 |\n","children":"","reference":"\n### 参见\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.sticky-section)\n"},"list-view":{"name":"## list-view","description":"> 组件类型：UniListViewElement \n\n 列表组件\n\n### list-view 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.02 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| direction | string | \"vertical\" | 滚动方向，可取值 none、horizontal、vertical，默认值vertical。注：iOS 平台仅支持vertical |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| none | 禁止滚动 |\n@| horizontal | 横向滚动 |\n@| vertical | 竖向滚动 |\n| ~~scroll-x~~ | boolean | false | 允许横向滚动，不支持同时设置scroll-y属性为true，同时设置true时scroll-y生效。已废弃，请改用direction |\n| ~~scroll-y~~ | boolean | true | 允许纵向滚动，不支持同时设置scroll-x属性为true，同时设置true时scroll-y生效。已废弃，请改用direction |\n| ~~rebound~~ | boolean | true | 控制是否回弹效果。已废弃，请改用bounces |\n| associative-container | string | \"\" | 关联的滚动容器 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| nested-scroll-view | 嵌套滚动 |\n| bounces | boolean | true | 控制是否回弹效果 优先级高于rebound |\n| upper-threshold | number | 50 | 距顶部/左边多远时（单位px），触发 scrolltoupper 事件 |\n| lower-threshold | number | 50 | 距底部/右边多远时（单位px），触发 scrolltolower 事件 |\n| scroll-top | number | 0 | 设置竖向滚动条位置 |\n| scroll-left | number | 0 | 设置横向滚动条位置 |\n| show-scrollbar | boolean | true | 控制是否出现滚动条 |\n| scroll-into-view | string([string.IDString](/uts/data-type.md#ide-string)) | - | 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素起始位置 |\n| scroll-with-animation | boolean | false | 是否在设置滚动条位置时使用滚动动画，设置false没有滚动动画 |\n| refresher-enabled | boolean | false | 开启下拉刷新，暂时不支持scroll-x = true横向刷新 |\n| refresher-threshold | number | 45 | 设置下拉刷新阈值, 仅 refresher-default-style = 'none' 自定义样式下生效 |\n| refresher-max-drag-distance | number | - | 设置下拉最大拖拽距离（单位px），默认是下拉刷新控件高度的2.5倍 |\n| refresher-default-style | string | \"black\" | 设置下拉刷新默认样式，支持设置 black \\| white \\| none， none 表示不使用默认样式 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| black | 深颜色雪花样式 |\n@| white | 浅白色雪花样式 |\n@| none | 不使用默认样式 |\n| refresher-background | string([string.ColorString](/uts/data-type.md#ide-string)) | \"transparent\" | 设置下拉刷新区域背景颜色，默认透明 |\n| refresher-triggered | boolean | false | 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发 |\n| enable-back-to-top | boolean | false | iOS点击顶部状态栏滚动条返回顶部，只支持竖向 |\n| custom-nested-scroll | boolean | false | 子元素是否开启嵌套滚动 将滚动事件与父元素协商处理 |\n| @refresherpulling | (event: [UniRefresherEvent](#unirefresherevent)) => void | - | 下拉刷新控件被下拉 |\n| @refresherrefresh | (event: [UniRefresherEvent](#unirefresherevent)) => void | - | 下拉刷新被触发 |\n| @refresherrestore | (event: [UniRefresherEvent](#unirefresherevent)) => void | - | 下拉刷新被复位 |\n| @refresherabort | (event: [UniRefresherEvent](#unirefresherevent)) => void | - | 下拉刷新被中止 |\n| @scrolltoupper | (event: [UniScrollToUpperEvent](#uniscrolltoupperevent)) => void | - | 滚动到顶部/左边，会触发 scrolltoupper 事件 |\n| @scrolltolower | (event: [UniScrollToLowerEvent](#uniscrolltolowerevent)) => void | - | 滚动到底部/右边，会触发 scrolltolower 事件 |\n| @scroll | (event: [UniScrollEvent](#uniscrollevent)) => void | - | 滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY} |\n| @scrollend | (event: [UniScrollEvent](#uniscrollevent)) => void | - | 滚动结束时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY} |\n\n#### direction 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| none | 4.0 | 4.11 | 4.02 |\n| horizontal | 4.0 | x | x |\n| vertical | 4.0 | 4.11 | 4.02 |\n\n\n#### associative-container 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| nested-scroll-view | 4.11 | 4.11 | x |\n\n\n#### refresher-default-style 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| black | 3.9 | 4.11 | - |\n| white | 3.9 | 4.11 | - |\n| none | 3.93 | 4.11 | - |\n","event":"\n### 事件\n#### UniRefresherEvent\n\n##### UniRefresherEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniRefresherEventDetail** | 是 | - | - |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| dy | number | 是 | - | - |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniRefresherEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n\n#### UniScrollToUpperEvent\n\n##### UniScrollToUpperEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniScrollToUpperEventDetail** | 是 | - |  |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| direction | string | 是 | - | 滚动方向 top 或 left |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniScrollToUpperEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n\n#### UniScrollToLowerEvent\n\n##### UniScrollToLowerEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniScrollToLowerEventDetail** | 是 | - |  |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| direction | string | 是 | - | 滚动方向 bottom 或 right |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniScrollToLowerEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n\n#### UniScrollEvent\n\n##### UniScrollEvent 的属性值\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| detail | **UniScrollEventDetail** | 是 | - |  |\n@| 名称 | 类型 | 必备 | 默认值 | 描述 |\n@| :- | :- | :- | :- | :- |\n@| scrollTop | number | 是 | - | 竖向滚动的距离 |\n@| scrollLeft | number | 是 | - | 横向滚动的距离 |\n@| scrollHeight | number | 是 | - | 滚动区域的高度 |\n@| scrollWidth | number | 是 | - | 滚动区域的宽度 |\n@| deltaY | number | 是 | - | 当次滚动事件竖向滚动量 |\n@| deltaX | number | 是 | - | 当次滚动事件横向滚动量 |\n| bubbles | boolean | 是 | - |  是否冒泡 |\n| cancelable | boolean | 是 | - |  是否可以取消 |\n| type | string | 是 | - |  事件类型 |\n| target | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| currentTarget | [UniElement](/dom/unielement.md) \\| null | 否 | - |  UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。 |\n| timeStamp | number | 是 | - |  事件发生时的时间戳 |\n\n\n##### UniScrollEvent 的方法\n| 名称 | 类型 | 必填 | 默认值 | 描述 |\n| :- | :- | :- | :- | :- |\n| stopPropagation | () => void | 是 | - |  阻止当前事件的进一步传播 |\n| preventDefault | () => void | 是 | - |  阻止当前事件的默认行为  |\n","example":"### 示例 \n> [hello uni-app x](https://gitcode.net/dcloud/hello-uni-app-x/-/blob/alpha/pages/component/list-view/list-view.uvue) \n ::: preview https://hellouniappx.dcloud.net.cn/web/#/pages/component/list-view/list-view\n>Template\n```vue\n\n\n<template>\n  <view class=\"main\">\n    <list-view :direction=\"scroll_direction\" :rebound=\"bounces_boolean\" :upper-threshold=\"upper_threshold_input\"\n      :lower-threshold=\"lower_threshold_input\" :scroll-top=\"scroll_top_input\" :scroll-left=\"scroll_left_input\"\n      :show-scrollbar=\"show_scrollbar_boolean\" :scroll-into-view=\"scrollIntoView\"\n      :scroll-with-animation=\"scroll_with_animation_boolean\" :refresher-enabled=\"refresher_enabled_boolean\"\n      :refresher-background=\"refresher_background_input\" :refresher-triggered=\"refresher_triggered_boolean\"\n      :refresher-default-style=\"refresher_default_style_input\" @click=\"list_view_click\"\n      @touchstart=\"list_view_touchstart\" @touchmove=\"list_view_touchmove\" @touchcancel=\"list_view_touchcancel\"\n      @touchend=\"list_view_touchend\" @tap=\"list_view_tap\" @longpress=\"list_view_longpress\"\n      @refresherpulling=\"list_view_refresherpulling\" @refresherrefresh=\"list_view_refresherrefresh\"\n      @refresherrestore=\"list_view_refresherrestore\" @refresherabort=\"list_view_refresherabort\"\n      @scrolltoupper=\"list_view_scrolltoupper\" ref=\"listview\" @scrolltolower=\"list_view_scrolltolower\"\n      @scroll=\"list_view_scroll\" style=\"width:100%;\" id=\"listview\">\n      <list-item v-for=\"key in scrollData\" :key=\"key\" :id=\"key\" @click=\"list_item_click\"\n        @touchstart=\"list_item_touchstart\" @touchmove=\"list_item_touchmove\" @touchcancel=\"list_item_touchcancel\"\n        @touchend=\"list_item_touchend\" @tap=\"list_item_tap\" @longpress=\"list_item_longpress\" class=\"list-item\">\n        <text>{{key}}</text>\n      </list-item>\n      <!-- #ifdef APP -->\n      <list-item slot=\"refresher\" class=\"refresh-box\">\n        <text class=\"tip-text\">{{text[state]}}</text>\n      </list-item>\n      <!-- #endif -->\n    </list-view>\n  </view>\n\n  <scroll-view style=\"flex:1\" direction=\"vertical\">\n    <view class=\"content\">\n      <!-- #ifdef APP -->\n      <boolean-data :defaultValue=\"false\" title=\"设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发\"\n        @change=\"change_refresher_triggered_boolean\"></boolean-data>\n      <boolean-data :defaultValue=\"false\" title=\"开启下拉刷新\" @change=\"change_refresher_enabled_boolean\"></boolean-data>\n      <boolean-data :defaultValue=\"false\" title=\"开启自定义样式\" @change=\"change_refresher_style_boolean\"></boolean-data>\n      <!-- #endif -->\n      <boolean-data :defaultValue=\"false\" title=\"是否在设置滚动条位置时使用滚动动画，设置false没有滚动动画\"\n        @change=\"change_scroll_with_animation_boolean\"></boolean-data>\n      <boolean-data :defaultValue=\"false\" title=\"控制是否出现滚动条\" @change=\"change_show_scrollbar_boolean\"></boolean-data>\n      <!-- #ifdef APP -->\n      <boolean-data :defaultValue=\"true\" title=\"控制是否回弹效果\" @change=\"change_bounces_boolean\"></boolean-data>\n      <!-- #endif -->\n      <boolean-data :defaultValue=\"true\" title=\"允许纵向滚动\" @change=\"change_scroll_y_boolean\"></boolean-data>\n      <!-- #ifdef APP -->\n      <boolean-data :defaultValue=\"false\" title=\"允许横向滚动\" @change=\"change_scroll_x_boolean\"></boolean-data>\n      <!-- #endif -->\n      <input-data defaultValue=\"50\" title=\"距顶部/左边多远时（单位px），触发 scrolltoupper 事件\" type=\"number\"\n        @confirm=\"confirm_upper_threshold_input\"></input-data>\n      <input-data defaultValue=\"50\" title=\"距底部/右边多远时（单位px），触发 scrolltolower 事件\" type=\"number\"\n        @confirm=\"confirm_lower_threshold_input\"></input-data>\n      <input-data defaultValue=\"0\" title=\"设置竖向滚动条位置\" type=\"number\" @confirm=\"confirm_scroll_top_input\"></input-data>\n      <!-- #ifdef APP -->\n      <input-data defaultValue=\"0\" title=\"设置横向滚动条位置\" type=\"number\" @confirm=\"confirm_scroll_left_input\"></input-data>\n      <input-data defaultValue=\"#FFF\" title=\"设置下拉刷新区域背景颜色\" type=\"text\"\n        @confirm=\"confirm_refresher_background_input\"></input-data>\n      <enum-data :items=\"size_enum\" title=\"通过id位置跳转\" @change=\"item_change_size_enum\"></enum-data>\n      <navigator url=\"/pages/component/list-view/list-view-refresh\">\n        <button type=\"primary\" class=\"button\">\n          list-view 下拉刷新\n        </button>\n      </navigator>\n      <!-- #endif -->\n      <navigator url=\"/pages/component/list-view/list-view-multiplex\">\n        <button type=\"primary\" class=\"button\">\n          list-view 对list-item复用测试\n        </button>\n      </navigator>\n      <navigator url=\"/pages/component/list-view/list-view-multiplex-input\">\n        <button type=\"primary\" class=\"button\">\n          list-view 复用测试（item中嵌入input）\n        </button>\n      </navigator>\n      <navigator url=\"/pages/component/list-view/list-view-multiplex-video\">\n        <button type=\"primary\" class=\"button\">\n          list-view 复用测试（item中嵌入video）\n        </button>\n      </navigator>\n      <navigator url=\"/pages/component/list-view/list-view-children-in-slot\">\n        <button type=\"primary\" class=\"button\">\n          list-view 测试插槽中子组件增删\n        </button>\n      </navigator>\n    </view>\n  </scroll-view>\n</template>\n\n<style>\n  .main {\n    max-height: 250px;\n    padding: 5px 0;\n    border-bottom: 1px solid rgba(0, 0, 0, .06);\n    flex-direction: row;\n    justify-content: center;\n  }\n\n  .main .list-item {\n    width: 100%;\n    height: 250px;\n    border: 1px solid #666;\n    background-color: #66ccff;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .tip-text {\n    color: #888;\n    font-size: 12px;\n  }\n\n  .refresh-box {\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    height: 45px;\n    width: 100%;\n  }\n\n  .button {\n    margin-top: 15px;\n  }\n</style>\n\n```\n>Script\n```uts\n\n  import { ItemType } from '@/components/enum-data/enum-data'\n  export default {\n    data() {\n      return {\n        refresher_triggered_boolean: false,\n        refresher_enabled_boolean: false,\n        scroll_with_animation_boolean: false,\n        show_scrollbar_boolean: false,\n        bounces_boolean: true,\n        scroll_y_boolean: true,\n        scroll_x_boolean: false,\n        scroll_direction: \"vertical\",\n        upper_threshold_input: 50,\n        lower_threshold_input: 50,\n        scroll_top_input: 0,\n        scroll_left_input: 0,\n        refresher_background_input: \"#FFF\",\n        scrollData: [] as Array<string>,\n        size_enum: [{ \"value\": 0, \"name\": \"item---0\" }, { \"value\": 3, \"name\": \"item---3\" }] as ItemType[],\n        scrollIntoView: \"\",\n        refresherrefresh: false,\n        refresher_default_style_input: \"black\",\n        text: ['继续下拉执行刷新', '释放立即刷新', '刷新中', \"\"],\n        state: 3,\n        reset: true\n      }\n    },\n    onLoad() {\n      let lists : Array<string> = []\n      for (let i = 0; i < 10; i++) {\n        lists.push(\"item---\" + i)\n      }\n      this.scrollData = lists\n    },\n    methods: {\n      list_view_click() { console.log(\"组件被点击时触发\") },\n      list_view_touchstart() { console.log(\"手指触摸动作开始\") },\n      list_view_touchmove() { console.log(\"手指触摸后移动\") },\n      list_view_touchcancel() { console.log(\"手指触摸动作被打断，如来电提醒，弹窗\") },\n      list_view_touchend() { console.log(\"手指触摸动作结束\") },\n      list_view_tap() { console.log(\"手指触摸后马上离开\") },\n      list_view_longpress() { console.log(\"如果一个组件被绑定了 longpress 事件，那么当用户长按这个组件时，该事件将会被触发。\") },\n      list_view_refresherpulling(e : RefresherEvent) {\n        console.log(\"下拉刷新控件被下拉\")\n        if (this.reset) {\n          if (e.detail.dy > 45) {\n            this.state = 1\n          } else {\n            this.state = 0\n          }\n        }\n      },\n      list_view_refresherrefresh() {\n        console.log(\"下拉刷新被触发 \")\n        this.refresherrefresh = true\n        this.refresher_triggered_boolean = true\n        this.state = 2\n        this.reset = false;\n        setTimeout(() => {\n          this.refresher_triggered_boolean = false\n        }, 1500)\n      },\n      list_view_refresherrestore() {\n        this.refresherrefresh = false\n        this.state = 3\n        this.reset = true\n        console.log(\"下拉刷新被复位\")\n      },\n      list_view_refresherabort() { console.log(\"下拉刷新被中止\") },\n      list_view_scrolltoupper(e : ScrollToUpperEvent) { console.log(\"滚动到顶部/左边，会触发 scrolltoupper 事件  direction=\" + e.detail.direction) },\n      list_view_scrolltolower(e : ScrollToLowerEvent) { console.log(\"滚动到底部/右边，会触发 scrolltolower 事件  direction=\" + e.detail.direction) },\n      list_view_scroll() { console.log(\"滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}\") },\n      list_item_click() { console.log(\"list-item组件被点击时触发\") },\n      list_item_touchstart() { console.log(\"手指触摸list-item组件动作开始\") },\n      list_item_touchmove() { console.log(\"手指触摸list-item组件后移动\") },\n      list_item_touchcancel() { console.log(\"手指触摸list-item组件动作被打断，如来电提醒，弹窗\") },\n      list_item_touchend() { console.log(\"手指触摸list-item组件动作结束\") },\n      list_item_tap() { console.log(\"手指触摸list-item组件后马上离开\") },\n      list_item_longpress() { console.log(\"list-item组件被绑定了 longpress 事件，那么当用户长按这个组件时，该事件将会被触发。\") },\n      change_refresher_triggered_boolean(checked : boolean) { this.refresher_triggered_boolean = checked },\n      change_refresher_enabled_boolean(checked : boolean) { this.refresher_enabled_boolean = checked },\n      change_scroll_with_animation_boolean(checked : boolean) { this.scroll_with_animation_boolean = checked },\n      change_show_scrollbar_boolean(checked : boolean) { this.show_scrollbar_boolean = checked },\n      change_bounces_boolean(checked : boolean) { this.bounces_boolean = checked },\n      change_scroll_y_boolean(checked : boolean) {\n        this.scroll_y_boolean = checked\n        this.change_scroll_direction()\n      },\n      change_scroll_x_boolean(checked : boolean) {\n        this.scroll_x_boolean = checked\n        this.change_scroll_direction()\n      },\n      change_scroll_direction() {\n        if (this.scroll_y_boolean && this.scroll_x_boolean || this.scroll_y_boolean) {\n          this.scroll_direction = \"vertical\"\n        } else if (!this.scroll_y_boolean && !this.scroll_x_boolean) {\n          this.scroll_direction = \"none\"\n        } else if (!this.scroll_y_boolean && this.scroll_x_boolean) {\n          this.scroll_direction = \"horizontal\"\n        }\n      },\n      confirm_upper_threshold_input(value : number) { this.upper_threshold_input = value },\n      confirm_lower_threshold_input(value : number) { this.lower_threshold_input = value },\n      confirm_scroll_top_input(value : number) { this.scroll_top_input = value },\n      confirm_scroll_left_input(value : number) { this.scroll_left_input = value },\n      confirm_refresher_background_input(value : string) { this.refresher_background_input = value },\n      item_change_size_enum(index : number) { this.scrollIntoView = \"item---\" + index },\n      //自动化测试例专用\n      check_scroll_height() : Boolean {\n        var listElement = this.$refs[\"listview\"] as UniElement\n        console.log(\"check_scroll_height--\" + listElement.scrollHeight)\n        if (listElement.scrollHeight > 2000) {\n          return true\n        }\n        return false\n      },\n      //自动化测试例专用\n      check_scroll_width() : Boolean {\n        var listElement = this.$refs[\"listview\"] as UniElement\n        console.log(\"check_scroll_width\" + listElement.scrollWidth)\n        if (listElement.scrollWidth > 2000) {\n          return true\n        }\n        return false\n      },\n      change_refresher_style_boolean(checked : boolean) {\n        if (checked) {\n          this.refresher_default_style_input = \"none\"\n        } else {\n          this.refresher_default_style_input = \"black\"\n        }\n      }\n    }\n  }\n\n```\n:::","compatibility":"### list-view 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| direction | 4.0 | 4.11 | x |\n| ~~scroll-x~~ | 3.9 | x | x |\n| ~~scroll-y~~ | 3.9 | 4.11 | x |\n| ~~rebound~~ | 3.9 | 4.11 | x |\n| associative-container | 4.11 | 4.11 | x |\n| bounces | 4.0 | 4.11 | x |\n| upper-threshold | 3.9 | 4.11 | 4.02 |\n| lower-threshold | 3.9 | 4.11 | 4.02 |\n| scroll-top | 3.9 | 4.11 | 4.02 |\n| scroll-left | 3.9 | 4.11 | x |\n| show-scrollbar | 3.9 | 4.11 | 4.02 |\n| scroll-into-view | 3.9 | 4.11 | x |\n| scroll-with-animation | 3.9 | 4.11 | 4.02 |\n| refresher-enabled | 3.9 | 4.11 | x |\n| refresher-threshold | 3.9 | 4.11 | x |\n| refresher-max-drag-distance | 3.9 | 4.11 | x |\n| refresher-default-style | 3.9 | 4.11 | x |\n| refresher-background | 3.9 | 4.11 | x |\n| refresher-triggered | 3.9 | 4.11 | x |\n| enable-back-to-top | x | 4.11 | x |\n| custom-nested-scroll | 3.9 | 4.11 | x |\n| @refresherpulling | 3.9 | 4.11 | x |\n| @refresherrefresh | 3.9 | 4.11 | x |\n| @refresherrestore | 3.9 | 4.11 | x |\n| @refresherabort | 3.9 | 4.11 | x |\n| @scrolltoupper | 3.9 | 4.11 | 4.02 |\n| @scrolltolower | 3.9 | 4.11 | 4.02 |\n| @scroll | 3.9 | 4.11 | 4.02 |\n| @scrollend | 3.9 | 4.11 | x |\n","children":"### 子组件 @children-tags \n - [list-item](#list-item)\n- [sticky-header](https://uniapp.dcloud.net.cn/uni-app-x/component/sticky.html#sticky-header)\n- [sticky-section](https://uniapp.dcloud.net.cn/uni-app-x/component/sticky.html#sticky-section)","reference":"\n### 参见\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.list-view)\n"},"navigator":{"name":"## navigator","description":"> 组件类型：UniNavigatorElement \n\n 页面链接\n\n### navigator 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.0 |\n","attribute":"### 属性 \n| 名称 | 类型 | 默认值 | 描述 |\n| :- | :- | :- | :- |\n| target | string | - | 在哪个目标上发生跳转，默认当前应用 |\n| url | string([string.PageURIString](/uts/data-type.md#ide-string)) | - | 当前应用内的跳转链接 |\n| open-type | string | \"navigate\" | 跳转方式 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| navigate | 对应 uni.navigateTo 或 navigateToMiniProgram 的功能 |\n@| redirect | 对应 uni.redirectTo 的功能 |\n@| switchTab | 对应 uni.switchTab 的功能 |\n@| reLaunch | 对应 uni.reLaunch 的功能 |\n@| navigateBack | 对应 uni.navigateBack 的功能 |\n| delta | number | - | 当 open-type 为 navigateBack 时有效，表示回退的层数 |\n| app-id | string | - | 当target=\"miniProgram\"时有效，要打开的小程序 appId |\n| path | string | - | 当target=\"miniProgram\"时有效，打开的页面路径，如果为空则打开首页 |\n| extra-data | object | - | 当target=\"miniProgram\"时有效，需要传递给目标应用的数据，目标应用可在 App.onLaunch()，App.onShow() 中获取到这份数据 |\n| version | string | - | 当target=\"miniProgram\"时有效，要打开的小程序版本，有效值 develop（开发版），trial（体验版），release（正式版），仅在当前小程序为开发版或体验版时此参数有效；如果当前小程序是体验版或正式版，则打开的小程序必定是正式版 |\n| animation-type | string | \"pop-in/out\" | 当 open-type=\"navigateTo\" 或 open-type=\"navigateBack\" 时有效，窗口的显示/关闭的动画类型。 |\n@| 值名称 | 描述 |\n@| :- | :- |\n@| auto | 自动选择动画效果 |\n@| none | 无动画效果 |\n@| slide-in-right | 从右侧横向滑动效果 |\n@| slide-in-left | 左侧横向滑动效果 |\n@| slide-in-top | 从上侧竖向滑动效果 |\n@| slide-in-bottom | 从下侧竖向滑动效果 |\n@| fade-in | 从透明到不透明逐渐显示效果 |\n@| zoom-out | 从小到大逐渐放大显示效果 |\n@| zoom-fade-out | 从小到大逐渐放大并且从透明到不透明逐渐显示效果 |\n@| pop-in | 从右侧平移入栈动画效果 |\n@| slide-out-right | 横向向右侧滑出屏幕动画 |\n@| slide-out-left | 横向向左侧滑出屏幕动画 |\n@| slide-out-top | 竖向向上侧滑出屏幕动画 |\n@| slide-out-bottom | 竖向向下侧滑出屏幕动画 |\n@| fade-out | 从不透明到透明逐渐隐藏动画 |\n@| zoom-in | 从大逐渐缩小关闭动画 |\n@| zoom-fade-in | 从大逐渐缩小并且从不透明到透明逐渐隐藏关闭动画 |\n@| pop-out | 从右侧平移出栈动画效果 |\n| animation-duration | number | 300 | 当 open-type=\"navigateTo\" 或 open-type=\"navigateBack\" 时有效，窗口的显示/关闭动画的持续时间。 |\n| hover-class | string | - | 指定按下去的样式类。当 hover-class=\"none\" 时，没有点击态效果 |\n| hover-stop-propagation | boolean | - | 指定是否阻止本节点的祖先节点出现点击态 |\n| hover-start-time | number | - | 按住后多久出现点击态，单位毫秒 |\n| hover-stay-time | number | - | 手指松开后点击态保留时间，单位毫秒 |\n| render-link | boolean | true | 是否给 navigator 组件加一层 a 标签控制 ssr 渲染 |\n\n#### open-type 兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| navigate | 3.9 | 4.11 | 4.0 |\n| redirect | 3.9 | 4.11 | 4.0 |\n| switchTab | 3.9 | 4.11 | 4.0 |\n| reLaunch | 3.9 | 4.11 | 4.0 |\n| navigateBack | 3.9 | 4.11 | 4.0 |\n\n","event":"","example":"### 示例 \n> [hello uni-app x](https://gitcode.net/dcloud/hello-uni-app-x/-/blob/alpha/pages/component/navigator/navigator.uvue) \n ::: preview https://hellouniappx.dcloud.net.cn/web/#/pages/component/navigator/navigator\n>Template\n```vue\n<template>\n  <page-head :title=\"title\"></page-head>\n  <view class=\"uni-padding-wrap uni-common-mt\">\n    <navigator class=\"navigator navigate\" url=\"navigate?title=navigate\">\n      <button type=\"default\">跳转到新页面</button>\n    </navigator>\n    <navigator class=\"navigator redirect\" url=\"redirect?title=redirect\" open-type=\"redirect\">\n      <button type=\"default\">在当前页打开</button>\n    </navigator>\n    <navigator style=\"flex-direction: row;justify-content: space-between;\">\n      <text>两端对齐样式测试</text>\n      <view style=\"width: 20px;height: 20px; background-color: aqua;\"></view>\n    </navigator>\n  </view>\n</template>\n\n\n\n<style>\n  .navigator {\n    margin-bottom: 15px;\n  }\n</style>\n\n```\n>Script\n```uts\n\n  export default {\n    data() {\n      return {\n        title: 'navigator'\n      }\n    }\n  }\n\n```\n:::","compatibility":"### navigator 属性兼容性\n|  | Android | iOS | web |\n| :- | :- | :- | :- |\n| target | 3.9 | 4.11 | 4.0 |\n| url | 3.9 | 4.11 | 4.0 |\n| open-type | 3.9 | 4.11 | 4.0 |\n| delta | 3.9 | 4.11 | 4.0 |\n| path | 3.9 | x | 4.0 |\n| animation-type | 3.9 | 4.11 | 4.0 |\n| animation-duration | 3.9 | 4.11 | 4.0 |\n| render-link | x | x | 4.0 |\n","children":"","reference":"\n### 参见\n- [参见uni-app相关文档](https://uniapp.dcloud.io/component/navigator)\n- [参见uni-app x相关文档](https://doc.dcloud.net.cn/uni-app-x/component/navigator.html)\n- [相关 Bug](https://issues.dcloud.net.cn/?mid=component.navigator)\n"},"picker-view-column":{"name":"## picker-view-column","description":"仅可放置于 picker-view 中，其子节点未继承 picker-view 的选中框的高度，需要自己设置高度并居中\n\n### picker-view-column 兼容性\n| Android | iOS | web |\n| :- | :- | :- |\n| 3.9 | 4.11 | 4.0 |\n","attribute":"","event":"","example":"","compatibility":"","children":"","reference":"\n### 参见\n- [参见uni-app相关文档](https://uniapp.dcloud.net.cn/component/picker-view.html#picker-view-column)\n- [参见uni-app x相关文档](https://doc.dcloud.net.cn/uni-app-x/component/picker-view.html)\n"}}